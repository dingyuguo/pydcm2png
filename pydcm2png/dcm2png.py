# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dcm2png')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dcm2png')
    _dcm2png = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dcm2png', [dirname(__file__)])
        except ImportError:
            import _dcm2png
            return _dcm2png
        try:
            _mod = imp.load_module('_dcm2png', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dcm2png = swig_import_helper()
    del swig_import_helper
else:
    import _dcm2png
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class DCMOP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCMOP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DCMOP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dcm2png.new_DCMOP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dcm2png.delete_DCMOP
    __del__ = lambda self: None

    def to_DicomImage(self):
        return _dcm2png.DCMOP_to_DicomImage(self)

    def decode_dcm(self, xfer):
        return _dcm2png.DCMOP_decode_dcm(self, xfer)

    def get_and_display_minmax(self):
        return _dcm2png.DCMOP_get_and_display_minmax(self)

    def apply_window(self, opt_windowType=0, opt_windowParameter=1, opt_windowCenter=0.0, opt_windowWidth=0.0):
        return _dcm2png.DCMOP_apply_window(self, opt_windowType, opt_windowParameter, opt_windowCenter, opt_windowWidth)

    def dump_voi_LUT(self):
        return _dcm2png.DCMOP_dump_voi_LUT(self)

    def open(self, file_name):
        return _dcm2png.DCMOP_open(self, file_name)

    def get_window_type(self, window_cnt, voi_lut_cnt, no_window=False):
        return _dcm2png.DCMOP_get_window_type(self, window_cnt, voi_lut_cnt, no_window)

    def apply_normal_window(self):
        return _dcm2png.DCMOP_apply_normal_window(self)

    def get_pixel_data(self):
        return _dcm2png.DCMOP_get_pixel_data(self)
    __swig_setmethods__["width"] = _dcm2png.DCMOP_width_set
    __swig_getmethods__["width"] = _dcm2png.DCMOP_width_get
    if _newclass:
        width = _swig_property(_dcm2png.DCMOP_width_get, _dcm2png.DCMOP_width_set)
    __swig_setmethods__["height"] = _dcm2png.DCMOP_height_set
    __swig_getmethods__["height"] = _dcm2png.DCMOP_height_get
    if _newclass:
        height = _swig_property(_dcm2png.DCMOP_height_get, _dcm2png.DCMOP_height_set)
    __swig_setmethods__["channels_num"] = _dcm2png.DCMOP_channels_num_set
    __swig_getmethods__["channels_num"] = _dcm2png.DCMOP_channels_num_get
    if _newclass:
        channels_num = _swig_property(_dcm2png.DCMOP_channels_num_get, _dcm2png.DCMOP_channels_num_set)

    def isMonochrome(self):
        return _dcm2png.DCMOP_isMonochrome(self)
DCMOP_swigregister = _dcm2png.DCMOP_swigregister
DCMOP_swigregister(DCMOP)


def pixel_data(dcm_file, data):
    return _dcm2png.pixel_data(dcm_file, data)
pixel_data = _dcm2png.pixel_data

def get_width(dcm_file):
    return _dcm2png.get_width(dcm_file)
get_width = _dcm2png.get_width

def get_height(dcm_file):
    return _dcm2png.get_height(dcm_file)
get_height = _dcm2png.get_height
# This file is compatible with both classic and new-style classes.


